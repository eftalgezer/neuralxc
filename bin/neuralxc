#!/usr/bin/python3
import argparse
from neuralxc.drivers import *
if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Add data to hdf5 file')
    subparser = parser.add_subparsers()

    #================ Plot Basis Set ================
    basis = subparser.add_parser('basis', description='Plot radial basis functions')
    basis.add_argument('basis', action='store', type=str, help='Path to .json file \
        containing the basis to plot')
    basis.set_defaults(func=plot_basis)

    #================ Tensorflow model converter ==========

    tfcon = subparser.add_parser('convert-tf', description='Converts a tensorflow NeuralXC into a numpy NeuralXC')
    tfcon.add_argument('tf', action='store', help ='Path to tensorflow model')
    tfcon.add_argument('np', action='store', help='Destination for numpy model')
    tfcon.add_argument('override', action='store_true', help='Override existing model?')
    tfcon.set_defaults(func=convert_tf)

    #================ Data routines ================

    dat = subparser.add_parser('data', description='Add data to hdf5 file')
    datsub = dat.add_subparsers()

    adddat =  datsub.add_parser('add')
    adddat.add_argument('hdf5', action='store',type=str, help ='Path to hdf5 file')
    adddat.add_argument('system', action='store',type=str, help ='System')
    adddat.add_argument('method', action='store',type=str, help ='Method')
    adddat.add_argument('add', action='store',type=str, nargs='*',
        help='Which quantities to add (energy, forces, density)')
    adddat.add_argument('-traj', metavar='traj',
        type=str, default='', help='Path to .xyz/.traj file')
    adddat.add_argument('-density', metavar='density',
        type=str, default='', help='Path to basis representation file')
    adddat.add_argument('-override', action=('store_true'), help='If exists, override?')
    adddat.add_argument('-slice', metavar='slice',
        type=str, default=':', help='Only add slice of dataset')
    adddat.set_defaults(func=add_data_driver)


    def inspectdat_driver(args):
        subprocess.Popen('h5dump -n ' + args.hdf5, shell=True)

    inspectdat = datsub.add_parser('inspect')
    inspectdat.add_argument('hdf5', action='store',type=str, help ='Path to hdf5 file')
    inspectdat.set_defaults(func=inspectdat_driver)


    splitdat = datsub.add_parser('split')
    splitdat.add_argument('hdf5', action='store',type=str, help ='Path to hdf5 file')
    splitdat.add_argument('group', action='store',type=str, help ='Which group to apply slicing to')
    splitdat.add_argument('label', action='store',type=str, help ='New label for slice')
    splitdat.add_argument('-slice', metavar='slice', default=':',
        type=str, help='')
    splitdat.add_argument('-comp', metavar='comp', default='',
        type=str, help='')
    splitdat.set_defaults(func=split_data_driver)

    deldat = datsub.add_parser('delete')
    deldat.add_argument('hdf5', action='store',type=str, help ='Path to hdf5 file')
    deldat.add_argument('group', action='store',type=str, help ='Which group to apply slicing to')
    deldat.set_defaults(func=delete_data_driver)

    sampledat = datsub.add_parser('sample')
    sampledat.add_argument('preprocessor', action='store', help ='Path to configuration file for preprocessor')
    sampledat.add_argument('size', action='store',type=int, help ='Sample size')
    sampledat.add_argument('-dest', action='store',type=str,default='sample.npy', help ='Save to')
    sampledat.add_argument('-hdf5', metavar='hdf5', type=str, nargs=2, help='Path to hdf5 file, baseline data')
    sampledat.add_argument('-cutoff', metavar='cutoff', type=float, default=0.0, help='Cut off extreme datapoints')
    sampledat.set_defaults(func=sample_driver)

    # =============== Fitter =====================

    fit = subparser.add_parser('hyperopt', description='Fit a NeuralXC model and optimize hyperparameters with GridSearchCV ')
    fit.add_argument('preprocessor', action='store', help ='Path to configuration file for preprocessor')
    fit.add_argument('config', action='store', help='Path to .json configuration file setting hyperparameters')
    fit.add_argument('-mask', action=('store_true'), help='Create a config file mask')
    fit.add_argument('-hdf5', metavar='hdf5', type=str, nargs=3, help='Path to hdf5 file, baseline data, reference data')
    fit.add_argument('-sets', metavar='sets', type=str, default='', help='Path to file defining sets')
    fit.add_argument('-sample', metavar='sample', type=str, default='', help='Only use a subsample of data contained in hdf5 file')
    fit.add_argument('-cutoff', metavar='cutoff', type=float, default=0.0, help='Cut off extreme datapoints')
    fit.set_defaults(func=hyperopt_driver)


    fit = subparser.add_parser('fit', description='Fit a NeuralXC model')
    fit.add_argument('preprocessor', action='store', help ='Path to configuration file for preprocessor')
    fit.add_argument('config', action='store', help='Path to .json configuration file setting hyperparameters')
    fit.add_argument('-mask', action=('store_true'), help='Create a config file mask')
    fit.add_argument('-hdf5', metavar='hdf5', type=str, nargs=3, help='Path to hdf5 file, baseline data, reference data')
    fit.add_argument('-sets', metavar='sets', type=str, default='', help='Path to file defining sets')
    fit.add_argument('-sample', metavar='sample', type=str, default='', help='Only use a subsample of data contained in hdf5 file')
    fit.add_argument('-cutoff', metavar='cutoff', type=float, default=0.0, help='Cut off extreme datapoints')
    fit.add_argument('-model', metavar='model', type=str, default='', help='Continue training model found at this location')
    fit.set_defaults(func=fit_driver)

    # =============== Evaluate =====================

    eval = subparser.add_parser('eval', description='Evaluate a NeuralXC model')
    eval.add_argument('preprocessor', action='store', help ='Path to configuration file for preprocessor')
    eval.add_argument('-model',metavar='model',default='', help ='Path to NeuralXC model')
    eval.add_argument('-hdf5', metavar='hdf5', type=str, nargs=3, help='Path to hdf5 file, baseline data, reference data')
    eval.add_argument('-plot', action='store_true', help ='Create scatterplot?')
    eval.add_argument('-savefig', action='store',type=str, default='', help ='Save scatterplot?')
    eval.add_argument('-cutoff', metavar='cutoff', type=float, default=0.0, help='Cut off extreme datapoints')
    eval.set_defaults(func=eval_driver)

    # =============== Evaluate =====================

    pred = subparser.add_parser('predict', description='Predict energies with NeuralXC model')
    pred.add_argument('preprocessor', action='store', help ='Path to configuration file for preprocessor')
    pred.add_argument('-model',metavar='model', help ='Path to NeuralXC model')
    pred.add_argument('-hdf5', metavar='hdf5', type=str, nargs=2, help='Path to hdf5 file, baseline data, reference data')
    pred.add_argument('-dest', metavar='dest', type=str, default = 'prediction', help ='Destination where to store data')
    pred.set_defaults(func=predict_driver)

    # ============== Preprocessor =================

    pre = subparser.add_parser('pre', description='Preprocess electron density')
    pre.add_argument('preprocessor', action='store', help ='Path to configuration file for preprocessor')
    pre.add_argument('-dest', metavar='dest', type=str, default = '.tmp/', help ='Destination where to store data,\
                                                                        can be either a directory or an .hdf5 file (with groups)')
    pre.add_argument('-mask', action=('store_true'), help='Create a config file mask')
    pre.add_argument('-xyz', metavar='xyz', type=str, default='', help='Path to xyz file')
    pre.set_defaults(func=pre_driver)

    args = parser.parse_args()

    args.func(args)
