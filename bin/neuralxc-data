#!/usr/bin/python3
import h5py
import numpy as np
import os
import json
import glob
from ase.io import read
import argparse

def add_energy(*args, **kwargs):
    return add_data('energy', *args, **kwargs)

def add_forces(*args, **kwargs):
    return add_data('forces', *args, **kwargs)

def add_density(key, *args, **kwargs):
    return add_data(key, *args, **kwargs)

def add_species(file, system, traj_path = ''):

        order = [system]
        cg = file #Current group
        for idx, o in enumerate(order):
            if not o in cg.keys():
                cg = cg.create_group(o)
            else:
                cg = cg[o]

        if not 'species' in cg.attrs:
            if not traj_path:
                raise Exception('Must provide a trajectory file to define species')
            species = ''.join(read(traj_path, 0).get_chemical_symbols())
            cg.attrs.update({'species' : species})

def add_data(which, file, data, system, method,
              override= False):

        order = [system, method]
        if not which in ['energy','forces']:
            order.append('density')

        cg = file #Current group
        for idx, o in enumerate(order):
            if not o in cg.keys():
                cg = cg.create_group(o)
            else:
                cg = cg[o]

        if which =='energy':
            cg.attrs.update({'E0': min(data)})

        print('{} systems found, adding {}'.format( len(data), which))

        def create_dataset():
            cg.create_dataset(which,
                    data = data)

        try:
            create_dataset()
        except RuntimeError:
            if override:
                del cg[which]
                create_dataset()
            else:
                print('Already exists. Set override=True')

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Add data to hdf5 file')
    parser.add_argument('hdf5', action='store',type=str, help ='Path to hdf5 file')
    parser.add_argument('system', action='store',type=str, help ='System')
    parser.add_argument('method', action='store',type=str, help ='Method')
    parser.add_argument('add', action='store',type=str, nargs='*',
        help='Which quantities to add (energy, forces, density)')
    parser.add_argument('-traj', metavar='traj',
        type=str, default='', help='Path to .xyz/.traj file')
    parser.add_argument('-density', metavar='density',
        type=str, default='', help='Path to basis representation file')
    parser.add_argument('-override', action=('store_true'), help='If exists, override?')
    parser.add_argument('-slice', metavar='slice',
        type=str, default=':', help='Only add slice of dataset')

    args = parser.parse_args()
    try:
        file = h5py.File(args.hdf5 ,'r+')
    except OSError:
        file = h5py.File(args.hdf5 ,'w')

    i,j,k = [(None if a == '' else int(a)) for a in args.slice.split(':')] +\
        [None]*(3-len(args.slice.split(':')))

    ijk = slice(i,j,k)

    def obs(which):
        if which == 'energy':
            if args.traj:
                add_species(file, args.system, args.traj)
                energies = np.array([a.get_potential_energy()\
                 for a in read(args.traj,':')])[ijk]
                add_energy(file, energies, args.system, args.method, args.override)
            else:
                raise Exception('Must provide a trajectory file')
                file.close()
        elif which == 'forces':
            if args.traj:
                add_species(file, args.system, args.traj)
                forces = np.array([a.get_forces()\
                 for a in read(args.traj,':')])[ijk]
                add_forces(file, forces, args.system, args.method, args.override)
            else:
                raise Exception('Must provide a trajectory file')
                file.close()
        elif which == 'density':
            add_species(file, args.system, args.traj)
            species = file[args.system].attrs['species']
            data = np.load(args.density)[:,1:-1][ijk]
            add_density((args.density.split('/')[-1]).split('.')[0], file, data,
                args.system, args.method, args.override)
        else:
            raise Exception('Option {} not recognized'.format(which))

    if args.density and not 'density' in args.add:
        args.add.append('density')
    for observable in args.add:
        obs(observable)

    file.close()
